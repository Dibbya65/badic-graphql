type Query {
  users(query: String): [User!]!
  posts(query: String): [Post!]!
  me: User!
  post: Post!
  comments: [Comment!]!
}
type Mutation {
  createUser(data: CreateUserInput): User!
  updateUser(id: ID!, data: UpdateUserInput): User!
  deleteUser(id: ID!): User!
  createPost(
    id: String!
    title: String!
    body: String!
    published: Boolean
    author: ID!
  ): Post!
  deletePost(id: ID!): Post!
  createComment(text: String!, author: ID!, post: ID!): Comment!
  deleteComment(id: ID!): Comment!
}
type Subscription {
  count: Int!
  comment(postId: ID): Comment!
  post: PostSubscriptionPayload!
}
input CreateUserInput {
  name: String!
  email: String!
  age: Int
}
input UpdateUserInput {
  name: String
  email: String
  age: Int
}
type User {
  id: ID!
  name: String!
  email: String!
  age: Int
  posts: [Post!]
}
type Post {
  id: ID!
  title: String!
  body: String!
  published: Boolean!
  author: User!
}
enum MutationType {
  CREATED
  UPDATED
  DELETED
}
type Comment {
  id: ID!
  text: String!
  author: User!
  post: Post!
}
type PostSubscriptionPayload {
  mutation: MutationType!
  data: Post!
}
